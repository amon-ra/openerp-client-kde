 <chapter>
 <title>Server modules</title>
 <para>
  In the &koo; repository, apart from the client itself you'll find several server modules. We'd like, of course, them to be added to the official TinyERP server distribution, but even if that happens someday, their everyday development needs to be somewhere and we want the process to remain public.
 </para>
 <para>
  In this chapter you'll find an in-depth explanation of each module. What offers to the user and how it's done for developers to improve it. However, before explaining each module, we will explain how to make it available to TinyERP for install.
 </para>
 <para>
  Server modules can be found in the <literal>server-modules</literal> directory in the &koo; source distribution. There, each directory is a different module that can be independently installed, except otherwise stated in the specific module documentation. In this directory you can also find a shell script named <literal>create-symlinks.sh</literal> which can be used in &unix; machines to make all the modules available to the TinyERP server.
 </para>
 <para>
  Suppose you have your server at <literal>/usr/local/tinyerp</literal>, then use <literal>./create-symlinks.sh /usr/local/tinyerp/bin/addons</literal>, restart the server and the modules should be available at <emphasis>Administration -> Modules Management -> Modules -> Uninstalled Modules</emphasis>
 </para>
 <sect1 id="smart-attach">
  <title>Smart attach</title>
  <para>
   When installed, this module automatically extracts information from attached files and stores it in a new field in the database. Extracted information means that it can read text from PDF, ODF, DOC or TXT files (among others) and if the file is an image it is scanned using an Optical Character Recognition (OCR) program.
  </para>
  <sect2>
   <title>Installation</title>
   <para>
    For the module to work properly you'll need to satisfy some dependencies on external programs (server side):
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>Strigi</emphasis>. The module uses <literal>xmlindexer</literal> which comes with <emphasis>strigi</emphasis>'s distribution to extract the text of different files, such as text files, PDF, ODF, etc. Probably newer versions will recognize more file formats, so the newer the better. (<ulink url="http://strigi.sf.net"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Gamera</emphasis>. Optional: You will need this program if you want text extraction from images to work. Currently it's only used for threasholding the image but it'll be much more used in the future. Note that you will probably need to set PATH and PYTHONPATH appropiately before launching the server! (<ulink url="http://ldp.library.jhu.edu/projects/gamera/"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>tesseract-ocr</emphasis>. Optional: You will need this program if you want text extraction from images to work. Currently version 1.44 is used but code for version 2 is already in SVN ready to be tested, and will become a requirement in the near future for a couple of reasons: It's faster and supports languages other than English. (<ulink url="http://code.google.com/p/tesseract-ocr/"/>)
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>

 <sect1 id="full-text-search">
  <title>Full text search</title>
  <para>
   The full text search module offers the possibility of searching anything in the database like the user is used in web searchers. As the module uses the full text searching capabilities of PostgreSQL, the administrator can tune the system to provide great results, by setting different priorities to different fields or by using dictionaries and stemmers. For example, one can make the search for the word 'using', return any document that contains the words 'use', 'using' and 'used'.
  </para>
  <mediaobject>
   <imageobject>
    <imagedata fileref="fts.png"/>
   </imageobject>
  </mediaobject>
  <para>
   Full text search works very well with the Smart Attach module, meaning that you can index meta information automatically extracted from attached documents.
  </para>
  
  <sect2>
   <title>Installation</title>
   <para>
    Before you can use this module you'll need to satisfy two dependencies:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>TSearch2.</emphasis> TSearch2 adds full text search capabilities to PostgreSQL. Note that since version 8.3 PostgreSQL has TSearch2 included into core, so you don't need to do anything. Otherwise, you'll need to install it which usually means compiling (if your distribution didn't do it for you, and add the support to the database with <literal>psql database < tsearch2.sql</literal>. (<ulink url="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/"/>)
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>PL/PythonU.</emphasis> As <emphasis>Full text search</emphasis> trigger mechanism uses Python on the database you'll need to install Python on the database. Note the <literal>U</literal> stands for Untrusted, as Python is classified as an untrusted language in PostgreSQL. In the future we'll probably offer the chance of choosing between PL/PythonU or PL/SQL triggers.
     </para>
    </listitem>
   </itemizedlist>
   <note>
    <para>
     In both cases it's possible to add support to a single database or to all newly created databases by adding TSearch2 or Python support to database <literal>template1</literal>, which is used to create new databases in PostgreSQL (unless another template is specified).
    </para>
    <para>
     This module also uses Psycopg2 in the trigger and thus such a package needs to be installed in the server where PostgreSQL resides. Psycopg2 is used to quote field values and avoid SQL injection.
    </para>
   </note>
  </sect2>

  <sect2>
   <title>Configuration</title>
   <para>
    Once you've installed the dependencies and the module via <emphasis>Administration - Module Administration - Modules</emphasis>, you need to configure which fields you want to be indexed. The module will add a new section in <emphasis>Administration - Configuration - Full Text Search</emphasis>. 
   </para>

  </sect2>

 </sect1>
 <sect1 id="Pyro">
  <title>Pyro</title>
  <para>
  The pyro module is very easy to use. You may download it from the usual location and once in your server, you just need to install it in a given database. From there on, each time you start that database the pyro protocol will be available on port 8071. It's important to note that you need to start the server with that database in order for pyro to be available so you'll need something like <literal>./openerp-server.py -d "database_with_pyro_installed"</literal>
  </para>
  <para>If you don't do that, you'll need to login to the database with another protocol, for the service to be available.
  </para>
 
  <para>It is possible to change the port where the module listens to by adding <literal>pyroport = 4500</literal> to the OpenERP server config file.
  </para>

 
  <para>Installing this module and using it in Koo (you need to specify the protocol with the "Change" button in the login dialog) will by itself give an important performance boost. Specially true on slow networks, or better said, with those with a big delay, such as ADSL or 3G. If you work in a LAN it's also worth using it, even you don't suffer performance problems because it will give users a noticeable sense of immediateness.
  </para>
  
  <sect2>
   <title>SSL</title>
   <para>
	   To enable pyro SSL you must ensure the python module M2Crypto and OpenSSL are available on the server and the client.  You'll need to generate the SSL certificates or for testing you can use the example certifcations provided.  To generate your own certificates, please read the Pyro manual (<ulink url="http://www.xs4all.nl/~irmen/pyro3/manual/9-security.html#ssl" />)
   </para>
   <sect3>
    <title>Server Configuration</title>
   <para>
	   Next there are several options which to be set in the OpenERP server config file, options starting with pyrossl_ correspond to options in Pyro.
   </para>
   <itemizedlist>
	   <listitem>
		   <para>
			   pyrossl: Must be set to True.  Required.
		   </para>
	   </listitem>
	   <listitem>
		   <para>
			   pyrossl_certdir: The directory of above certificate files. Required.
		   </para>
	   </listitem>
	   <listitem>
		   <para>
			   pyroport-ssl: Defaults to 8072
		   </para>
	   </listitem>
	   <listitem>
		   <para>
			   pyrossl_postconncheck: You can set to 0 (default=1) to circumvent connection/certificate validations when using SSL
		   </para>
	   </listitem>
	   <listitem>
		   <para>
			   pyrossl_cert: The file name of the server certificate.  Defaults to server.pem.
		   </para>

	   </listitem>
	   <listitem>
		   <para>
			   pyrossl_key: The file name of certificate key.  Defaults to None.
		   </para>

	   </listitem>
	   <listitem>
		   <para>
			   pryprossl_ca_cert: The file name of the CA.  Defaults to client.pem
	   	   </para>
	   </listitem>
   </itemizedlist>
   </sect3>
   <sect3>
    <title>Client Configuration</title>
    <para>test</para>
   <itemizedlist>
	   <listitem>
		   <para>
			   pyrossl.certdir: Directory for certificates.  Defaults to &#60;system&#62;/share/Koo/defaults-certs
		   </para>
	   </listitem>
	   <listitem>
		   <para>
			   pyrossl.cert: Defaults to client.pem in the certdir.
		   </para>
	   </listitem>
	   <listitem>
		   <para>
			   pyrossl_key: The file name of certificate key.  Defaults to None.
		   </para>

	   </listitem>
	   <listitem>
		   <para>
			   pyro.dns_uri: Make pyro use DNS names instead of IP addresses.  SSL certificates usually have DNS names, so this usually needs to be set to 1.
		   </para>
	   </listitem>
	   <listitem>
		   <para>
			   pyrossl_postconncheck: You can set to 0 (default=1) to circumvent connection/certificate validations when using SSL
		   </para>
	   </listitem>
   </itemizedlist>

  </sect3>
  </sect2>
 </sect1>
</chapter>

